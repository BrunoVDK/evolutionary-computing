% determine the optimal window size for the custom stopping criterion. To
% determine this, we let the GA run on every route 10 times with a certain
% fixed parameter configuration. We will allow each run to only have 100
% generations. In each run, we will determine the longest streak of having
% the same best value before an improvement happens. With this data, we
% determine a threshold, such that we know with 95% confidence that there will
% not be another improvement of the best value, once the threshold is
% reached.

function [longest] = longest_streak(best_list)
    current_value = -1; % since best -1 does not exist
    current_counter = 0;
    best_sofar = 0;
    i = 1;
    while i <= size(best_list,2)
        t = best_list(1,i);
        if t ~= current_value
            if current_counter > best_sofar
                best_sofar = current_counter;
            end
            current_value = t;
            current_counter = 1;
        else
            current_counter = current_counter + 1;
        end
        i = i + 1;
    end
    longest = best_sofar;
end

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % CONFIGURATION
    NIND=50;		% Number of individuals
    MAXGEN=100;		% Maximum no. of generations
    ELITIST=0.05;    % percentage of the elite population
    STOP_PERCENTAGE=.95;    % percentage of equal fitness individuals for stopping
    PR_CROSS=.70;     % probability of crossover
    PR_MUT=.55;       % probability of mutation
    LOCALLOOP=0;      % local loop removal
    CROSSOVER = 'xunnamed';  % default crossover operator
    REPRESENTATION = 'path'; % default representation
    MUTATION = 'inversion'; % default mutation
    SCALING = false; % scale path yes or no
    HEURISTIC = "both"; % Local heuristic mode
    PARENT_SELECTION = 'tournament';
    SURVIVOR_SELECTION = 'fitness_based';
    DIVERSIFICATION = 1; % set to two for island model
    STOP_CRITERION = 1; % set to two for our own stop criterion
    REPETITIONS = 10;
    ADAPTIVE = 1; % 2 to set it on
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    datasets = ["datasets/rondrit016.tsp",...
            "datasets/rondrit018.tsp",...
            "datasets/rondrit023.tsp",...
            "datasets/rondrit025.tsp",...
            "datasets/rondrit048.tsp",...
            "datasets/rondrit050.tsp",...
            "datasets/rondrit051.tsp",...
            "datasets/rondrit067.tsp",...
            "datasets/rondrit070.tsp",...
            "datasets/rondrit100.tsp",...
            "datasets/rondrit127.tsp",...
            "datasets/belgiumtour.tsp",...
            "datasets/xqf131.tsp"];

    sample = datasets(:);
    streaks = zeros(1,REPETITIONS*size(dataset,2));
        
    
    for i = 1:length(sample) 
        
        dataset = sample(i);
        data = load(dataset);
        x = data(:,1); y = data(:,2);
        load_set(data, SCALING);
        NVAR=size(data,1);

        totaltime = 0;
        for r = 1:REPETITIONS
            time = tic;
            [bs,avg,wst,gen] = run_ga(x, ...
                y, ...
                NIND, ...
                MAXGEN, ...
                NVAR, ...
                ELITIST, ...
                STOP_PERCENTAGE, ...
                PR_CROSS, ...
                PR_MUT, ...
                CROSSOVER, ...
                LOCALLOOP, ...
                NaN, ...
                NaN, ...
                NaN, ...
                REPRESENTATION, ...
                MUTATION, ...
                false, ... % no hybridisation
                false, ... % no hybridisation
                false, ... % no hybridisation
                PARENT_SELECTION, ...
                SURVIVOR_SELECTION, ...
                false, ...
                DIVERSIFICATION, ...
                STOP_CRITERION, ...
                ADAPTIVE);
            
            totaltime = totaltime + time;
            best(r,i) = bs;
            worst(r,i) = wst;
            average(r,i) = avg;
            generations(r,i) = gen;
            streaks(1,i*r) = longest_streak(
        end
    end
    
    function load_set(data, scale)
        x = data(:,1);
        y = data(:,2);
        if scale
            x = x / max([data(:,1);data(:,2)]);
            y = y / max([data(:,1);data(:,2)]);
        end
    end